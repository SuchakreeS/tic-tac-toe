// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using TicTacToe;
//
//    var gameData = GameData.FromJson(jsonString);

namespace TicTacToe
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class GameData
    {
        [JsonProperty("PlayerData")]
        public PlayerData[] Players { get; set; }

        [JsonProperty("GameStageData")]
        public GameStageData[] GameStageData { get; set; }

        [JsonProperty("TurnCount")]
        public int TurnCount { get; set; }

        [JsonProperty("BoardSize")]
        public BoardSize BoardSize { get; set; }
    }

    public partial class GameStageData
    {
        [JsonProperty("BoardData")]
        public int[,] BoardData { get; set; }

        [JsonProperty("Selected")]
        public Position Selected { get; set; }

        [JsonProperty("PlayerNames")]
        public PlayerName[] PlayerNames { get; set; }

        [JsonProperty("CurrentTurn")]
        public PlayerName CurrentTurn { get; set; }

        [JsonProperty("Status")]
        public StageStatus Status { get; set; }

        [JsonProperty("WonPlayer")]
        public PlayerName WonPlayer { get; set; }

        [JsonProperty("WinAmount")]
        public int WinAmount { get; set; }
        public GameStageData(int[,] boardData, Position selected, PlayerName[] playerNames, PlayerName currentTurn, StageStatus status, PlayerName wonPlayer, int winAmount)
        {
            BoardData = boardData;
            Selected = selected;
            PlayerNames = playerNames;
            CurrentTurn = currentTurn;
            Status = status;
            WonPlayer = wonPlayer;
            WinAmount = winAmount;
        }
    }

    public partial class PlayerData
    {
        [JsonProperty("Score")]
        public int Score { get; set; }

        [JsonProperty("PlayerName")]
        public PlayerName PlayerName { get; set; }

        [JsonProperty("SymbolType")]
        public SymbolType SymbolType { get; set; }
        public PlayerData(int score, PlayerName playerName, SymbolType symbolType)
        {
            Score = score;
            PlayerName = playerName;
            SymbolType = symbolType;
        }
    }

    public partial class GameData
    {
        public static GameData FromJson(string json) => JsonConvert.DeserializeObject<GameData>(json, TicTacToe.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this GameData self) => JsonConvert.SerializeObject(self, TicTacToe.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
